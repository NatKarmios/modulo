apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    publications {
        api(MavenPublication) {
            groupId = parent.group
            artifactId = project.name
            version = parent.version

            pom {
                name = project.name
                description = "Used to create Modulo plugins"
                url = "https://github.com/NatKarmios/modulo"

                licenses {
                    license {
                        name = "GNU General Public License v3.0"
                        url = "https://www.gnu.org/licenses/gpl-3.0.txt"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        id = "nat karmios"
                        name = "Nat Karmios"
                        email = "nat@karmios.com"
                    }
                }

                scm {
                    url = "https://github.com/NatKarmios/modulo"
                    connection = "scm:git:https://github.com/NatKarmios/modulo.git"
                    developerConnection = "scm:git:https://github.com/NatKarmios/modulo.git"
                }
            }
        }
    }
    repositories {
        maven {
            name = "github"
            url = uri("https://maven.pkg.github.com/NatKarmios/modulo")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: System.getenv("USERNAME")
                password = System.getenv("TOKEN")
            }
        }
        maven {
            name = "ossrhSnapshots"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"

            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }

        maven {
            name = "ossrhStaging"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey != null && signingPassword != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        publishing.publications.forEach { sign(it) }
    }
}
